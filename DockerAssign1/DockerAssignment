Ques 3.

=>Docker file permissions 

dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker ps
permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get "http://%2Fvar%2Frun%2Fdocker.sock/v1.45/containers/json": dial unix /var/run/docker.sock: connect: permission denied
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ sudo usermod -aG docker $USERdac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ newgrp docker
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ ls -l /var/run/docker.sock
srw-rw---- 1 root docker 0 May 29 16:16 /var/run/docker.sock
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ sudo systemctl restart docker
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES

=>Creating Dockerfile and HelloWorld.java
=>Dockerfile
# Dockerfile

FROM openjdk:8

WORKDIR /app

COPY HelloWorld.java .

RUN javac HelloWorld.java

CMD ["java", "HelloWorld"]

=>HelloWorld.java
class HelloWorld{
	public static void main(String[] args) {
		System.out.println("Hello World");
		System.out.println("D2 developer");
		System.out.println("Hello World");
		System.out.println("By D1 developer");
	}
}

=>Creating image and container
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ ls
Dockerfile  HelloWorld.java
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ sudo docker build -t hello .
[sudo] password for dac: 
[+] Building 20.4s (9/9) FINISHED                                                                                                                             docker:default
 => [internal] load build definition from Dockerfile                                                                                                                    0.0s
 => => transferring dockerfile: 159B                                                                                                                                    0.0s
 => [internal] load metadata for docker.io/library/openjdk:8                                                                                                            3.4s
 => [internal] load .dockerignore                                                                                                                                       0.0s
 => => transferring context: 2B                                                                                                                                         0.0s
 => [1/4] FROM docker.io/library/openjdk:8@sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452cb8                                                     15.0s
 => => resolve docker.io/library/openjdk:8@sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452cb8                                                      0.0s
 => => sha256:86e863cc57215cfb181bd319736d0baf625fe8f150577f9eb58bd937f5452cb8 1.04kB / 1.04kB                                                                          0.0s
 => => sha256:b273004037cc3af245d8e08cfbfa672b93ee7dcb289736c82d0b58936fb71702 7.81kB / 7.81kB                                                                          0.0s
 => => sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452 55.00MB / 55.00MB                                                                        6.5s
 => => sha256:3af2ac94130765b73fc8f1b42ffc04f77996ed8210c297fcfa28ca880ff0a217 1.79kB / 1.79kB                                                                          0.0s
 => => sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165 5.16MB / 5.16MB                                                                          1.6s
 => => sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a 10.88MB / 10.88MB                                                                        4.6s
 => => sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6 54.58MB / 54.58MB                                                                        6.4s
 => => sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5 5.42MB / 5.42MB                                                                          6.7s
 => => sha256:52a8c426d30b691c4f7e8c4b438901ddeb82ff80d4540d5bbd49986376d85cc9 210B / 210B                                                                              6.7s
 => => extracting sha256:001c52e26ad57e3b25b439ee0052f6692e5c0f2d5d982a00a8819ace5e521452                                                                               1.3s
 => => sha256:8754a66e005039a091c5ad0319f055be393c7123717b1f6fee8647c338ff3ceb 105.92MB / 105.92MB                                                                     13.8s
 => => extracting sha256:d9d4b9b6e964657da49910b495173d6c4f0d9bc47b3b44273cf82fd32723d165                                                                               0.1s
 => => extracting sha256:2068746827ec1b043b571e4788693eab7e9b2a95301176512791f8c317a2816a                                                                               0.2s
 => => extracting sha256:9daef329d35093868ef75ac8b7c6eb407fa53abbcb3a264c218c2ec7bca716e6                                                                               1.4s
 => => extracting sha256:d85151f15b6683b98f21c3827ac545188b1849efb14a1049710ebc4692de3dd5                                                                               0.1s
 => => extracting sha256:52a8c426d30b691c4f7e8c4b438901ddeb82ff80d4540d5bbd49986376d85cc9                                                                               0.0s
 => => extracting sha256:8754a66e005039a091c5ad0319f055be393c7123717b1f6fee8647c338ff3ceb                                                                               1.0s
 => [internal] load build context                                                                                                                                       0.0s
 => => transferring context: 262B                                                                                                                                       0.0s
 => [2/4] WORKDIR /app                                                                                                                                                  1.3s
 => [3/4] COPY HelloWorld.java .                                                                                                                                        0.0s
 => [4/4] RUN javac HelloWorld.java                                                                                                                                     0.6s
 => exporting to image                                                                                                                                                  0.1s
 => => exporting layers                                                                                                                                                 0.0s
 => => writing image sha256:dbcb0676498f8ca9ed9ce2498526726bf88282e025efe89b086a8a77b7bd4204                                                                            0.0s
 => => naming to docker.io/library/hello                                                                                                                                0.0s
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ sudo docker run -it hello
Hello World
D2 developer
Hello World
By D1 developer

=>Login for dockerHub

dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker login
Authenticating with existing credentials...
WARNING! Your password will be stored unencrypted in /home/dac/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

=>Pushing the image to dockerHub

dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker tag hello rohitinchale/hello:1.0
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker push rohitinchale/hello:1.0
The push refers to repository [docker.io/rohitinchale/hello]
5355081249f9: Pushed 
6e17c8813f49: Pushed 
81982a4fb3ae: Pushed 
6b5aaff44254: Mounted from library/openjdk 
53a0b163e995: Mounted from library/openjdk 
b626401ef603: Pushed 
9b55156abf26: Pushed 
293d5db30c9f: Mounted from library/openjdk 
03127cdb479b: Mounted from library/openjdk 
9c742cd6c7a5: Mounted from library/openjdk 
1.0: digest: sha256:54b96b340a0bec945507f55ebeb35be6ebb8ed8614c52ba75d6de1bbb44e0ad2 size: 2415

Ques 4.

=>Altering the HelloWorld file and pushing it as version 2.0 in dockerHub

dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ vi HelloWorld.java

class HelloWorld{
	public static void main(String[] args) {
		System.out.println("Hello World");
		System.out.println("D2 developer");
		System.out.println("Hello World");
		System.out.println("By D1 developer");
		System.out.println("This is from CDAC ACTS");
		System.out.println("We are in DAC");
	}
}


dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker build -t hello .
[+] Building 2.8s (10/10) FINISHED                               docker:default
 => [internal] load build definition from Dockerfile                       0.0s
 => => transferring dockerfile: 159B                                       0.0s
 => [internal] load metadata for docker.io/library/openjdk:8               2.1s
 => [auth] library/openjdk:pull token for registry-1.docker.io             0.0s
 => [internal] load .dockerignore                                          0.0s
 => => transferring context: 2B                                            0.0s
 => [1/4] FROM docker.io/library/openjdk:8@sha256:86e863cc57215cfb181bd31  0.0s
 => [internal] load build context                                          0.0s
 => => transferring context: 349B                                          0.0s
 => CACHED [2/4] WORKDIR /app                                              0.0s
 => [3/4] COPY HelloWorld.java .                                           0.0s
 => [4/4] RUN javac HelloWorld.java                                        0.6s
 => exporting to image                                                     0.0s
 => => exporting layers                                                    0.0s
 => => writing image sha256:48ad8f08d41d950d5c21fbe750a2abaa1b9f2e2e4519f  0.0s
 => => naming to docker.io/library/hello                                   0.0s
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker run -it hello
Hello World
D2 developer
Hello World
By D1 developer
This is from CDAC ACTS
We are in DAC
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker tag hello rohitinchale/hello:2.0
dac@dac-Veriton-M200-H310:~/RR/gitrepo/dockerdemo$ docker push rohitinchale/hello:2.0
The push refers to repository [docker.io/rohitinchale/hello]
d591e94dd228: Pushed 
fa0fdf98e5ee: Pushed 
81982a4fb3ae: Layer already exists 
6b5aaff44254: Layer already exists 
53a0b163e995: Layer already exists 
b626401ef603: Layer already exists 
9b55156abf26: Layer already exists 
293d5db30c9f: Layer already exists 
03127cdb479b: Layer already exists 
9c742cd6c7a5: Layer already exists 
2.0: digest: sha256:484f405dc25c89cf80a9228a84c6b84a17079723c67833d1d9050a0f74c95c99 size: 2415

